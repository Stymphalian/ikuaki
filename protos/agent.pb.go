// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/Stymphalian/ikuaki/protos/agent.proto

package Stymphalian_ikuaki

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type UpdateRes struct {
	Text string `protobuf:"bytes,1,opt,name=Text" json:"Text,omitempty"`
}

func (m *UpdateRes) Reset()                    { *m = UpdateRes{} }
func (m *UpdateRes) String() string            { return proto.CompactTextString(m) }
func (*UpdateRes) ProtoMessage()               {}
func (*UpdateRes) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *UpdateRes) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type UpdateReq struct {
	Text string `protobuf:"bytes,1,opt,name=Text" json:"Text,omitempty"`
}

func (m *UpdateReq) Reset()                    { *m = UpdateReq{} }
func (m *UpdateReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateReq) ProtoMessage()               {}
func (*UpdateReq) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *UpdateReq) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func init() {
	proto.RegisterType((*UpdateRes)(nil), "Stymphalian.ikuaki.UpdateRes")
	proto.RegisterType((*UpdateReq)(nil), "Stymphalian.ikuaki.UpdateReq")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Agent service

type AgentClient interface {
	// information from the world server
	Update(ctx context.Context, opts ...grpc.CallOption) (Agent_UpdateClient, error)
}

type agentClient struct {
	cc *grpc.ClientConn
}

func NewAgentClient(cc *grpc.ClientConn) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) Update(ctx context.Context, opts ...grpc.CallOption) (Agent_UpdateClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Agent_serviceDesc.Streams[0], c.cc, "/Stymphalian.ikuaki.Agent/Update", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentUpdateClient{stream}
	return x, nil
}

type Agent_UpdateClient interface {
	Send(*UpdateReq) error
	CloseAndRecv() (*UpdateRes, error)
	grpc.ClientStream
}

type agentUpdateClient struct {
	grpc.ClientStream
}

func (x *agentUpdateClient) Send(m *UpdateReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *agentUpdateClient) CloseAndRecv() (*UpdateRes, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UpdateRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Agent service

type AgentServer interface {
	// information from the world server
	Update(Agent_UpdateServer) error
}

func RegisterAgentServer(s *grpc.Server, srv AgentServer) {
	s.RegisterService(&_Agent_serviceDesc, srv)
}

func _Agent_Update_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentServer).Update(&agentUpdateServer{stream})
}

type Agent_UpdateServer interface {
	SendAndClose(*UpdateRes) error
	Recv() (*UpdateReq, error)
	grpc.ServerStream
}

type agentUpdateServer struct {
	grpc.ServerStream
}

func (x *agentUpdateServer) SendAndClose(m *UpdateRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *agentUpdateServer) Recv() (*UpdateReq, error) {
	m := new(UpdateReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Agent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Stymphalian.ikuaki.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Update",
			Handler:       _Agent_Update_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/Stymphalian/ikuaki/protos/agent.proto",
}

func init() { proto.RegisterFile("github.com/Stymphalian/ikuaki/protos/agent.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 170 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x48, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x0f, 0x2e, 0xa9, 0xcc, 0x2d, 0xc8, 0x48, 0xcc, 0xc9,
	0x4c, 0xcc, 0xd3, 0xcf, 0xcc, 0x2e, 0x4d, 0xcc, 0xce, 0xd4, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0x2f,
	0xd6, 0x4f, 0x4c, 0x4f, 0xcd, 0x2b, 0xd1, 0x03, 0x73, 0x84, 0x84, 0x90, 0x94, 0xe9, 0x41, 0x94,
	0x49, 0x19, 0x12, 0x65, 0x4a, 0x72, 0x7e, 0x6e, 0x6e, 0x7e, 0x1e, 0xc4, 0x18, 0x25, 0x79, 0x2e,
	0xce, 0xd0, 0x82, 0x94, 0xc4, 0x92, 0xd4, 0xa0, 0xd4, 0x62, 0x21, 0x21, 0x2e, 0x96, 0x90, 0xd4,
	0x8a, 0x12, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x30, 0x1b, 0x59, 0x41, 0x21, 0x36, 0x05,
	0x46, 0xc1, 0x5c, 0xac, 0x8e, 0x20, 0x77, 0x09, 0x79, 0x71, 0xb1, 0x41, 0x54, 0x0a, 0xc9, 0xea,
	0x61, 0x3a, 0x4e, 0x0f, 0x6e, 0x8a, 0x14, 0x5e, 0xe9, 0x62, 0x25, 0x06, 0x0d, 0x46, 0x27, 0xcb,
	0x28, 0x73, 0x62, 0xfc, 0x62, 0x8d, 0x69, 0x50, 0x12, 0x1b, 0x58, 0xca, 0x18, 0x10, 0x00, 0x00,
	0xff, 0xff, 0xa4, 0x76, 0xb1, 0xcd, 0x53, 0x01, 0x00, 0x00,
}
