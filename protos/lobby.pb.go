// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/Stymphalian/ikuaki/protos/lobby.proto

package Stymphalian_ikuaki

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ServerTypeEnum int32

const (
	ServerTypeEnum_UNKNOWN_SERVER ServerTypeEnum = 0
	ServerTypeEnum_WORLD_SERVER   ServerTypeEnum = 1
	ServerTypeEnum_AGENT_SERVER   ServerTypeEnum = 2
)

var ServerTypeEnum_name = map[int32]string{
	0: "UNKNOWN_SERVER",
	1: "WORLD_SERVER",
	2: "AGENT_SERVER",
}
var ServerTypeEnum_value = map[string]int32{
	"UNKNOWN_SERVER": 0,
	"WORLD_SERVER":   1,
	"AGENT_SERVER":   2,
}

func (x ServerTypeEnum) String() string {
	return proto.EnumName(ServerTypeEnum_name, int32(x))
}
func (ServerTypeEnum) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

// Create
type CreateReq struct {
	BinaryPath string         `protobuf:"bytes,1,opt,name=binary_path,json=binaryPath" json:"binary_path,omitempty"`
	ServerType ServerTypeEnum `protobuf:"varint,2,opt,name=server_type,json=serverType,enum=Stymphalian.ikuaki.ServerTypeEnum" json:"server_type,omitempty"`
}

func (m *CreateReq) Reset()                    { *m = CreateReq{} }
func (m *CreateReq) String() string            { return proto.CompactTextString(m) }
func (*CreateReq) ProtoMessage()               {}
func (*CreateReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *CreateReq) GetBinaryPath() string {
	if m != nil {
		return m.BinaryPath
	}
	return ""
}

func (m *CreateReq) GetServerType() ServerTypeEnum {
	if m != nil {
		return m.ServerType
	}
	return ServerTypeEnum_UNKNOWN_SERVER
}

type CreateRes struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Addr *Addr  `protobuf:"bytes,2,opt,name=addr" json:"addr,omitempty"`
}

func (m *CreateRes) Reset()                    { *m = CreateRes{} }
func (m *CreateRes) String() string            { return proto.CompactTextString(m) }
func (*CreateRes) ProtoMessage()               {}
func (*CreateRes) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *CreateRes) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CreateRes) GetAddr() *Addr {
	if m != nil {
		return m.Addr
	}
	return nil
}

// Destroy
type DestroyReq struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DestroyReq) Reset()                    { *m = DestroyReq{} }
func (m *DestroyReq) String() string            { return proto.CompactTextString(m) }
func (*DestroyReq) ProtoMessage()               {}
func (*DestroyReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *DestroyReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DestroyRes struct {
}

func (m *DestroyRes) Reset()                    { *m = DestroyRes{} }
func (m *DestroyRes) String() string            { return proto.CompactTextString(m) }
func (*DestroyRes) ProtoMessage()               {}
func (*DestroyRes) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

// Listing
type ListReq struct {
	ServerType ServerTypeEnum `protobuf:"varint,1,opt,name=server_type,json=serverType,enum=Stymphalian.ikuaki.ServerTypeEnum" json:"server_type,omitempty"`
}

func (m *ListReq) Reset()                    { *m = ListReq{} }
func (m *ListReq) String() string            { return proto.CompactTextString(m) }
func (*ListReq) ProtoMessage()               {}
func (*ListReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *ListReq) GetServerType() ServerTypeEnum {
	if m != nil {
		return m.ServerType
	}
	return ServerTypeEnum_UNKNOWN_SERVER
}

type ListRes struct {
	// A map[server_id]Addr
	// maps the server id to the hostport you can find the server on
	Servers map[string]*Addr `protobuf:"bytes,1,rep,name=servers" json:"servers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ListRes) Reset()                    { *m = ListRes{} }
func (m *ListRes) String() string            { return proto.CompactTextString(m) }
func (*ListRes) ProtoMessage()               {}
func (*ListRes) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *ListRes) GetServers() map[string]*Addr {
	if m != nil {
		return m.Servers
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateReq)(nil), "Stymphalian.ikuaki.CreateReq")
	proto.RegisterType((*CreateRes)(nil), "Stymphalian.ikuaki.CreateRes")
	proto.RegisterType((*DestroyReq)(nil), "Stymphalian.ikuaki.DestroyReq")
	proto.RegisterType((*DestroyRes)(nil), "Stymphalian.ikuaki.DestroyRes")
	proto.RegisterType((*ListReq)(nil), "Stymphalian.ikuaki.ListReq")
	proto.RegisterType((*ListRes)(nil), "Stymphalian.ikuaki.ListRes")
	proto.RegisterEnum("Stymphalian.ikuaki.ServerTypeEnum", ServerTypeEnum_name, ServerTypeEnum_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Lobby service

type LobbyClient interface {
	Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateRes, error)
	Destroy(ctx context.Context, in *DestroyReq, opts ...grpc.CallOption) (*DestroyRes, error)
	List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListRes, error)
}

type lobbyClient struct {
	cc *grpc.ClientConn
}

func NewLobbyClient(cc *grpc.ClientConn) LobbyClient {
	return &lobbyClient{cc}
}

func (c *lobbyClient) Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateRes, error) {
	out := new(CreateRes)
	err := grpc.Invoke(ctx, "/Stymphalian.ikuaki.Lobby/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) Destroy(ctx context.Context, in *DestroyReq, opts ...grpc.CallOption) (*DestroyRes, error) {
	out := new(DestroyRes)
	err := grpc.Invoke(ctx, "/Stymphalian.ikuaki.Lobby/Destroy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListRes, error) {
	out := new(ListRes)
	err := grpc.Invoke(ctx, "/Stymphalian.ikuaki.Lobby/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Lobby service

type LobbyServer interface {
	Create(context.Context, *CreateReq) (*CreateRes, error)
	Destroy(context.Context, *DestroyReq) (*DestroyRes, error)
	List(context.Context, *ListReq) (*ListRes, error)
}

func RegisterLobbyServer(s *grpc.Server, srv LobbyServer) {
	s.RegisterService(&_Lobby_serviceDesc, srv)
}

func _Lobby_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Stymphalian.ikuaki.Lobby/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).Create(ctx, req.(*CreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Stymphalian.ikuaki.Lobby/Destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).Destroy(ctx, req.(*DestroyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Stymphalian.ikuaki.Lobby/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).List(ctx, req.(*ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Lobby_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Stymphalian.ikuaki.Lobby",
	HandlerType: (*LobbyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Lobby_Create_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _Lobby_Destroy_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Lobby_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/Stymphalian/ikuaki/protos/lobby.proto",
}

func init() { proto.RegisterFile("github.com/Stymphalian/ikuaki/protos/lobby.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 429 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0x49, 0x6f, 0x1a, 0x31,
	0x14, 0xc7, 0xf1, 0x64, 0x41, 0x79, 0x20, 0x84, 0xde, 0x09, 0x4d, 0x37, 0xe4, 0x13, 0xaa, 0xaa,
	0xa1, 0xa5, 0x87, 0x6e, 0xa7, 0x90, 0x8c, 0x9a, 0x2a, 0x68, 0x52, 0x19, 0xda, 0x48, 0xbd, 0x20,
	0x4f, 0xc6, 0x2a, 0x16, 0xcc, 0x82, 0x6d, 0x22, 0xf9, 0xf3, 0xf4, 0x9b, 0xf5, 0x93, 0x54, 0xb3,
	0x90, 0xd0, 0x84, 0xd2, 0x28, 0xb7, 0xf1, 0xfb, 0xff, 0xe7, 0xe7, 0xb7, 0x19, 0x5e, 0xff, 0x94,
	0x66, 0xb6, 0x0a, 0xbd, 0xab, 0x34, 0xee, 0x8f, 0x8d, 0x8d, 0xb3, 0x19, 0x5f, 0x48, 0x9e, 0xf4,
	0xe5, 0x7c, 0xc5, 0xe7, 0xb2, 0x9f, 0xa9, 0xd4, 0xa4, 0xba, 0xbf, 0x48, 0xc3, 0xd0, 0x7a, 0xc5,
	0x01, 0x71, 0xc3, 0xe6, 0x95, 0x36, 0xf7, 0xcd, 0x83, 0x28, 0x57, 0x69, 0x1c, 0xa7, 0x49, 0x89,
	0xa1, 0x4b, 0x38, 0x3a, 0x51, 0x82, 0x1b, 0xc1, 0xc4, 0x12, 0x5f, 0x40, 0x23, 0x94, 0x09, 0x57,
	0x76, 0x9a, 0x71, 0x33, 0xeb, 0x90, 0x2e, 0xe9, 0x1d, 0x31, 0x28, 0x43, 0x5f, 0xb9, 0x99, 0xe1,
	0x09, 0x34, 0xb4, 0x50, 0xd7, 0x42, 0x4d, 0x8d, 0xcd, 0x44, 0xc7, 0xe9, 0x92, 0x5e, 0x6b, 0x40,
	0xbd, 0xfb, 0xa9, 0x78, 0xe3, 0xc2, 0x36, 0xb1, 0x99, 0xf0, 0x93, 0x55, 0xcc, 0x40, 0xdf, 0x9c,
	0xe9, 0x97, 0xdb, 0x2b, 0x35, 0xb6, 0xc0, 0x91, 0x51, 0x75, 0x93, 0x23, 0x23, 0x7c, 0x05, 0xfb,
	0x3c, 0x8a, 0x54, 0x81, 0x6e, 0x0c, 0x3a, 0xdb, 0xd0, 0xc7, 0x51, 0xa4, 0x58, 0xe1, 0xa2, 0x4f,
	0x01, 0x4e, 0x85, 0x36, 0x2a, 0xb5, 0x79, 0xfa, 0x77, 0x58, 0xb4, 0xb9, 0xa1, 0x6a, 0x1a, 0x40,
	0x7d, 0x24, 0xb5, 0xc9, 0x8d, 0x77, 0xca, 0x20, 0x8f, 0x2a, 0xe3, 0x17, 0x59, 0x03, 0x35, 0x0e,
	0xa1, 0x5e, 0x2a, 0xba, 0x43, 0xba, 0x7b, 0xbd, 0xc6, 0xa0, 0xb7, 0x0d, 0x56, 0xb9, 0x2b, 0xa8,
	0xf6, 0x13, 0xa3, 0x2c, 0x5b, 0xff, 0xe8, 0x4e, 0xa0, 0xb9, 0x29, 0x60, 0x1b, 0xf6, 0xe6, 0xc2,
	0x56, 0xe5, 0xe4, 0x9f, 0xe8, 0xc1, 0xc1, 0x35, 0x5f, 0xac, 0xc4, 0x7f, 0x9b, 0x53, 0xda, 0x3e,
	0x3a, 0xef, 0xc9, 0xcb, 0x33, 0x68, 0xfd, 0x5d, 0x03, 0x22, 0xb4, 0xbe, 0x05, 0xe7, 0xc1, 0xc5,
	0x65, 0x30, 0x1d, 0xfb, 0xec, 0xbb, 0xcf, 0xda, 0x35, 0x6c, 0x43, 0xf3, 0xf2, 0x82, 0x8d, 0x4e,
	0xd7, 0x11, 0x92, 0x47, 0x8e, 0x3f, 0xfb, 0xc1, 0x64, 0x1d, 0x71, 0x06, 0xbf, 0x09, 0x1c, 0x8c,
	0xf2, 0x05, 0xc4, 0x33, 0x38, 0x2c, 0x07, 0x88, 0xcf, 0xb6, 0xa5, 0x70, 0xb3, 0x4f, 0xee, 0x4e,
	0x59, 0xd3, 0x1a, 0x9e, 0x43, 0xbd, 0x9a, 0x10, 0x3e, 0xdf, 0xe6, 0xbd, 0x1d, 0xae, 0xbb, 0x5b,
	0xcf, 0x61, 0x43, 0xd8, 0xcf, 0x3b, 0x8c, 0x4f, 0xfe, 0xdd, 0xfb, 0xa5, 0xbb, 0x43, 0xd4, 0xb4,
	0x36, 0xfc, 0xf0, 0xe3, 0xdd, 0x43, 0xde, 0xd0, 0xa7, 0xfb, 0x90, 0xf0, 0xb0, 0x90, 0xde, 0xfe,
	0x09, 0x00, 0x00, 0xff, 0xff, 0xdc, 0x4e, 0x6b, 0xaf, 0xcb, 0x03, 0x00, 0x00,
}
